--SQL lite注释，创建一个表pythonCase
CREATE TABLE `pythonCase` (
	`product_id`	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,
	`low_fats`	TEXT,
	`recyclable`	TEXT
);
--修改表名为products
alter table "pythonCase" rename to "products";
--等效的四条SQL语句
select product_id from products where (low_fats,recyclable) = ("Y","Y");
select product_id from products where low_fats = "Y" and recyclable = "Y";
select product_id from products where (low_fats = "Y") * (recyclable = "Y");
select product_id from products where (low_fats || recyclable) = "YY";
--创建表test，创建前检查是否已存在
create table if not exists test(
id int not null auto_increment,primary key(id)
)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--删除test表
drop table if exists test ;
--修改表字段id为product_id
alter table test change id product_id int;


create table if not exists Customer (
id integer not null primary key autoincrement unique,
name text,
referee_id integer
);

select name from Customer where referee_id !=2 or referee_id is null;
select name from Customer where ifnull(referee_id,0) != 2;

create table if not exists World (
name text,
continent text,
area integer,
population integer,
gdp real
);
--mysql
insert into World (name,continent,area,population,gdp) values 
(Afghanistan,Asia,652230,25500100,20343000000),
(Albania,Europe,28748,2831741,12960000000),
(Algeria,Africa,2381741,37100000,188681000000),
(Andorra,Europe,468,78115,3712000000),
(Angola,Africa,1246700,20609294,100990000000);

--SQL lite
insert into World 
select "Afghanistan" as name, "Asia" as continent, 652230 as area, 25500100 as population, 20343000000 as gdp
union select "Albania","Europe",28748,2831741,12960000000
union select "Algeria","Africa",2381741,37100000,188681000000
union select "Andorra","Europe",468,78115,3712000000;

select name,area,population from World
where area >=3000000 or population >= 25000000;
--使用 or 会使索引会失效，在数据量较大的时候查找效率较低，通常建议使用 union 代替 or
select name,area,population from World
where area >=3000000
union
select name,area,population from World
where population >= 25000000;

create table if not exists Views(
article_id integer,
author_id integer,
viewer_id integer,
view_date text
);

insert into Views 
select 1 as article_id, 3 as author_id, 5 as viewer_id, "2019-08-01" as view_date
union select 1,3,6,"2019-08-02"
union select 2,7,7,"2019-08-01"
union select 2,7,6,"2019-08-02"
union select 4,7,1,"2019-07-22"
union select 3,4,4,"2019-07-21"
union select 3,4,4,"2019-07-21";
--默认升序
select distinct author_id as id from Views
where id = viewer_id order by id;
--8.0之后的版本，这两个效率近乎相当，8.0之前的版本distinct的效率要比group by的去重效率高，因为group by会有隐式排序，8.0之后移除了
select author_id as id from Views
where id = viewer_id group by id order by id;
--降序排列
select distinct author_id as id from Views
where id = viewer_id order by id desc;
--当推文内容中的字符数严格大于 15 时， LENGTH(str) 该函数返回字符串 str 的字节数，某些字符包含多于 1 个字节。
select tweet_id as id from tweets
where length(content)>15;
--对于SQL表，用于计算字符串中字符数的最佳函数是 CHAR_LENGTH(str)，它返回字符串 str 的长度
select tweet_id as id from tweets
where char_length(content)>15;
--1、char_length(str) （1）计算单位：字符 （2）不管汉字还是数字或者是字母都算是一个字符 
--2、length(str) （1）计算单位：字节 （2）utf8编码：一个汉字三个字节，一个数字或字母一个字节。 （3）gbk编码：一个汉字两个字节，一个数字或字母一个字节。

select 
	name, unique_id 
from Employees e
left join EmployeeUNI en
on e.id = en.id;
